@page "/chart"

@using System.Text

@using ChartJs.Blazor.ChartJS.Common

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks

@using GaussBell.Services

<h1>ChartJs</h1>

<div class="container-fluid">
    <div class="row">
        <div class="col-2"></div>
        <div class="col-8">
            <ChartJsLineChart @ref="_lineChart" Config="@_config" Width="600" Height="400"></ChartJsLineChart>
            
            <p>@_points</p>
        </div>
        <div class="col-2"></div>
    </div>
</div>

@code
{
    private LineConfig _config;
    private ChartJsLineChart _lineChart;

    private string _points;

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                ShowLines = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Normal Distribution"
                },
                Responsive = true,
                Legend = new ChartJs.Blazor.ChartJS.Common.Handlers.Legend
                {
                    Display = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            },
                            GridLines = new GridLines
                            {
                                Display = false
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                SuggestedMin = -2
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temp"
                            }
                        }
                    }
                }                
            }
        };

        var points = ChartPointService.BuildChartPoints(-5, 11)
            .Select(point => new Point(point.X, point.Y))
            .ToList();

        var dataSet = new LineDataset<Point>(points)
        {
            ShowLine = true,
            Hidden = false,
        };

        _config.Data.Datasets.Add(dataSet);

        _points = OutputPointList(points);

        _lineChart.Update();
    }

    private static string OutputPointList(IEnumerable<Point> points)
    {
        var sb = new StringBuilder();

        foreach (var point in points)
        {
            sb.AppendFormat("[{0}, {1}], ", point.X, point.Y);
        }

        return sb.ToString();
    }
}
